{"version":3,"sources":["MemoryGame.js","index.js"],"names":["MemoryGame","props","ImagePieces","tempCheckArr","state","showImg","Array","length","fill","divClick","compareImgArr","counter","checkMatch","bind","array","i","j","Math","floor","random","shuffleArray","this","key","e","push","toString","imgSrc","target","firstChild","src","arr","setState","tempArr","firstElement","parseInt","secondElement","setTimeout","className","map","text","onClick","undefined","style","visibility","srcSet","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"wPA2GeA,G,wDAvGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,YAAc,CAAC,MAAO,MAAO,MAAO,MAAO,QAAS,QACzD,MAAO,MAAO,QAAS,QAAS,OAAQ,QACxC,EAAKC,aAAe,GACpB,EAAKC,MAAQ,CACXC,QAASC,MAAM,EAAKJ,YAAYK,QAAQC,KAAK,UAC7CC,UAAU,EACVC,cAAe,GACfC,QAAS,GAEX,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAZD,E,kEAiBjB,SAAsBC,GACpB,IAAK,IAAIC,EAAID,EAAMP,OAAS,EAAGQ,EAAI,EAAGA,IAAK,CACvC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADD,EAEhB,CAACD,EAAME,GAAIF,EAAMC,IAAvCD,EAAMC,GAFgC,KAE5BD,EAAME,GAFsB,MAM7CI,CAAaC,KAAKnB,e,iCAIToB,EAAKC,GAAI,IAAD,OAEjBF,KAAKlB,aAAaqB,KAAKF,EAAIG,YAG3B,IAAMC,EAASH,EAAEI,OAAOC,WAAWC,IAC7BnB,EAAa,YAAOW,KAAKjB,MAAMM,eACrCA,EAAcc,KAAKE,GAGnB,IAAMI,EAAMT,KAAKjB,MAAMC,QAYvB,GAXAyB,EAAIR,GAAO,UAIXD,KAAKU,SAAS,CACZ1B,QAASyB,EACTpB,cAAeA,EACfC,QAASU,KAAKjB,MAAMO,QAAU,IAI5BU,KAAKjB,MAAMO,QAAU,EAKvB,GAJAU,KAAKU,SAAS,CACZtB,UAAU,IAGRC,EAAc,KAAOA,EAAc,GACrCW,KAAKlB,aAAe,GACpBkB,KAAKU,SAAS,CACZrB,cAAe,GACfD,UAAU,QAEP,CAEL,IAAIuB,EAAUX,KAAKjB,MAAMC,QAErB4B,EAAeC,SAASb,KAAKlB,aAAa,IAE1CgC,EAAgBD,SAASb,KAAKlB,aAAa,IAC/CiC,YAAW,WACTJ,EAAQC,GAAgB,SACxBD,EAAQG,GAAiB,SACzB,EAAKhC,aAAe,GACpB,EAAK4B,SAAS,CACZ1B,QAAS2B,EACTtB,cAAe,GACfD,UAAU,MAEX,S,+BAKC,IAAD,OACP,OACE,6BACE,2CACA,yBAAK4B,UAAU,qBACZhB,KAAKnB,YAAYoC,KAAI,SAACC,EAAMxB,GAC3B,OACE,yBAAKO,IAAKP,EAAGsB,UAAU,kBACrBG,QAAS,EAAKpC,MAAMK,SAAW,SAACc,GAAD,OAAO,EAAKX,WAAWG,EAAGQ,SAAKkB,GAC5D,yBAAKC,MAAO,CAACC,WAAY,EAAKvC,MAAMC,QAAQU,IAAKc,IAAK,KAAKU,EAAK,OAChEK,OAAQ,KAAKL,EAAK,iBAAkBjB,IAAKP,EAAG8B,IAAI,2B,GA7FzCC,cCEzBC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.69179ea7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './MemoryGame.css';\n\nclass MemoryGame extends Component {\n  constructor(props) {\n    super(props);\n    //Array of memory images\n    this.ImagePieces = ['cat', 'cat', 'dog', 'dog', 'horse', 'horse',\n    'pig', 'pig', 'snake', 'snake', 'fish', 'fish'];\n    this.tempCheckArr = [];\n    this.state = {\n      showImg: Array(this.ImagePieces.length).fill('hidden'),\n      divClick: true,\n      compareImgArr: [],\n      counter: 0\n    }   \n    this.checkMatch = this.checkMatch.bind(this);\n  }\n\n  //Shuffle memory game images\n  componentWillMount() {\n    function shuffleArray(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1));\n          [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    }\n    shuffleArray(this.ImagePieces);\n  }\n\n  //Check for match function\n  checkMatch(key, e) {\n    //For later hidding images purposes\n    this.tempCheckArr.push(key.toString());\n\n    //Create copy of (compareImgArr) and add img src, for later compare\n    const imgSrc = e.target.firstChild.src;\n    const compareImgArr = [...this.state.compareImgArr];\n    compareImgArr.push(imgSrc);\n\n    //Set current clicked item as 'visible' in main array 'showImg'\n    const arr = this.state.showImg\n    arr[key] = 'visible';\n\n    //Update state, counter for block user click method\n    //after unhidding two pieces\n    this.setState({\n      showImg: arr,\n      compareImgArr: compareImgArr,\n      counter: this.state.counter + 1\n    });\n\n    //Check if 2 items are clicked - if yes - disable clicking\n    if (this.state.counter % 2) {\n      this.setState({\n        divClick: false\n      });\n      //Check if pictures are matching\n      if (compareImgArr[0] === compareImgArr[1]) {\n        this.tempCheckArr = [];\n        this.setState({\n          compareImgArr: [],\n          divClick: true\n        });\n      } else {\n        //If pictures not match turn them back to hidden\n        var tempArr = this.state.showImg\n        // eslint-disable-next-line\n        var firstElement = parseInt(this.tempCheckArr[0]);\n        // eslint-disable-next-line\n        var secondElement = parseInt(this.tempCheckArr[1]);\n        setTimeout(()=>{\n          tempArr[firstElement] = 'hidden';\n          tempArr[secondElement] = 'hidden';\n          this.tempCheckArr = [];\n          this.setState({\n            showImg: tempArr,\n            compareImgArr: [],\n            divClick: true\n          })\n        }, 1500)\n      }\n    }\n  }\n\n  render() {\n    return(\n      <div>\n        <h1>Memory Game</h1>\n        <div className=\"mui-panel wrapper\">\n          {this.ImagePieces.map((text, i) => {\n            return (\n              <div key={i} className=\"modal mui-panel\" \n                onClick={this.state.divClick ? (e) => this.checkMatch(i, e) : undefined}>\n                  <img style={{visibility: this.state.showImg[i]}} src={'./'+text+'.jpg'}\n                  srcSet={'./'+text+'_lrg.jpg 1000w'} key={i} alt=\"Game Element\"/>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default MemoryGame;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './MemoryGame';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}